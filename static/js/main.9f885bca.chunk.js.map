{"version":3,"sources":["Login/redux.js","User/action.js","Login/Login.js","Const/URLConstant.js","Components/PrivateRoute.js","Feed/Components/Post.js","Feed/Feed.js","Feed/action.js","AfterLogin/AfterLogin.js","App.js","serviceWorker.js","User/reducer.js","Feed/redux.js","rootReducer.js","index.js"],"names":["inititalState","username","password","SET_FORM_DATA","userConstants","Container","styled","div","attrs","className","_templateObject","LoginContainer","_templateObject2","Login","onLogIn","_this","props","onLogInSuccess","history","push","_this2","this","_this$props","react_default","a","createElement","reactstrap_es","addonType","placeholder","value","onChange","e","type","outline","color","block","onClick","Component","withRouter","connect","state","login","dispatch","key","onDataChange","jwt","FEED_URL","PrivateRoute","_ref","component","rest","isLoggedIn","Object","objectWithoutProperties","Route","assign","render","PostContainer","Post_templateObject","PostContent","Post_templateObject2","ImgStyle","width","marginTop","ImgComponent","url","src","style","ButtonContainerStyle","padding","Post","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$props$item","item","userId","textValue","pictures","commentCount","length","map","index","Post_ImgComponent","size","FeedContainer","Feed_templateObject","Feed","loadFeed","posts","post","Components_Post","feed","payload","axios","get","AfterLogin_templateObject","AfterLogin","toggle","bind","assertThisInitialized","isOpen","setState","light","expand","href","navbar","AfterLogin_Container","Switch","Components_PrivateRoute","path","Redirect","exact","from","to","App","user","Boolean","window","location","hostname","match","initialState","userData","isLoading","combineReducers","arguments","undefined","action","objectSpread","defineProperty","data","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","promiseMiddleWare","ReactDOM","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f885bca.chunk.js","sourcesContent":["const inititalState = {\n    username: \"\",\n    password: \"\"\n};\n\n//reducer\nexport default (state = inititalState, action) => {\n    switch (action.type) {\n        case SET_FORM_DATA:\n            return {\n                ...state,\n                [action.key]: action.value\n            };\n\n        default:\n            return state;\n    }\n}\n\n//action generator\nconst ON_LOG_IN = \"ON_LOG_IN\";\nexport const onLogIn = () => {\n    return {\n        type: ON_LOG_IN\n    };\n};\n\nconst SET_FORM_DATA = \"SET_FORM_DATA\";\nexport const onDataChange = (key, value) => {\n    return {\n        type: SET_FORM_DATA,\n        key: key,\n        value: value\n    }\n}","export const userConstants = {\n    LOGIN_SUCCESS: \"LOGIN_SUCCESS\"\n}\n\nexport const onLogInSuccess = (jwt, username) => {\n    return {\n        type: userConstants.LOGIN_SUCCESS,\n        jwt: jwt,\n        username: username\n    }\n}","import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport {onLogIn, onDataChange} from './redux';\nimport { onLogInSuccess } from '../User/action';\n\nimport {withRouter} from 'react-router';\nimport './Login.css';\n\nimport { InputGroup, InputGroupAddon, Input, Button } from 'reactstrap';\nimport styled from 'styled-components';\n\nconst Container = styled.div.attrs({\n    className: \"container-fluid h-100\"\n})`\nbackground-color: #cf142b;\n`\n\nconst LoginContainer = styled.div.attrs({\n    className: \"col-4 login-container\"\n})`\n    border: 1px solid #afa3a3;\n    padding: 15px;\n    padding-bottom: 25px;\n    background-color: white;\n\n    webkit-box-shadow: 0 6pt 25pt 15pt rgba(25, 24, 24, 0.25);\n    box-shadow: 0 6pt 25pt 15pt rgba(25, 24, 24, 0.25);\n    border-radius: 3px;\n`\n\n\nclass Login extends Component {\n    onLogIn = () => {\n        const {username} = this.props;\n        this.props.onLogInSuccess('xxxxx', username);\n        this.props.history.push('/afterLogin');\n    }\n\n    render() {\n        const {username, password} = this.props;\n        return (\n            <Container>\n                <div className=\"row h-100 align-items-center\">\n                    <div className=\"col-12\">\n                        <div className=\"row justify-content-center\">\n                            <LoginContainer>\n                                <div className=\"col-12 name\">PetsBook</div>\n                                <div className=\"col-12 login-input\">\n                                    <InputGroup>\n                                        <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n                                        <Input placeholder=\"username\" value={username} onChange={\n                                            e => {\n                                                this.props.onChange(\"username\", e.value)\n                                            }\n                                        }/>\n                                    </InputGroup>\n                                </div>\n                                <div className=\"col-12 login-input\">\n                                    <InputGroup>\n                                        <Input placeholder=\"password\" value={password} type=\"password\" onChange={\n                                            e => {\n                                                this.props.onChange(\"password\", e.value)\n                                            }\n                                        }/>\n                                    </InputGroup>\n                                </div>\n                                <div className=\"col-12 login-input\">\n                                    <Button outline color=\"primary\" block onClick={this.onLogIn}>Login</Button>{' '}\n                                </div>\n                            </LoginContainer>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    username: state.login.username,\n    password: state.login.password\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onLogIn: () => dispatch(onLogIn()),\n    onChange: (key,value) => dispatch(onDataChange(key, value)),\n    onLogInSuccess: (jwt, username) => dispatch(onLogInSuccess(jwt, username))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","export const FEED_URL = \"/afterLogin/feed\"\nexport const INTEREST_URL = \"/afterLogin/interest\"\nexport const ASK_URL = \"/afterLogin/ask\"\nexport const INBOX_URL = \"/afterLogin/inbox\"\nexport const PROFILE_URL = \"/afterLogin/profile\"\n","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\n\nconst PrivateRoute = ({ component: Component, isLoggedIn: isLoggedIn, ...rest }) => (\n    <Route {...rest} render={props => (\n        true\n            ? <Component {...props} />\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n    )} />\n)\n\nexport default PrivateRoute;","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport {Button} from 'reactstrap'\n\nconst PostContainer = styled.div.attrs({\n    className: \"col-12\"\n})`\n    border: 1px solid #ccc9c9;\n    border-radius: 5px;\n    background-color: white;\n    padding:15px;\n    margin-bottom: 10px;\n`;\n\nconst PostContent = styled.div.attrs({\n    className: \"col-12\"\n})`\n    border-bottom: 1px solid #ccc9c9;\n    padding: 15px;\n`\n\nconst ImgStyle = {\n    width: \"inherit\",\n    marginTop: \"15px\"\n}\nconst ImgComponent = ({url}) => {\n    return (\n        <div className=\"col\">\n            <img src={url} style={ImgStyle}></img>\n        </div>\n    );\n}\n\nconst ButtonContainerStyle =  {\n    padding: \"15px\"\n}\n\nclass Post extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {userId, textValue, pictures, commentCount} = this.props.item;\n\n        return (\n            <PostContainer>\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        Avartar\n                    </div>\n                    <div className=\"col-9\">\n                        {userId}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <PostContent>\n                        {textValue}\n                    </PostContent>\n                </div>\n                <div className=\"row\">\n                    {pictures.length > 0 && pictures.map((url, index) => {\n                        return <ImgComponent url={url} key={index}></ImgComponent>;\n                    })\n                    }\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\" style={ButtonContainerStyle}>\n                        <Button color=\"primary\" size=\"sm\" block>Show {commentCount} Comments</Button>\n                    </div>\n                </div>\n            </PostContainer>\n        );\n    }\n}\n\nPost.propTypes = {\n    item: PropTypes.shape({\n        userId: PropTypes.string.isRequired,\n        textValue: PropTypes.string.isRequired,\n        pictures: PropTypes.arrayOf(PropTypes.string).isRequired,\n        commentCount: PropTypes.number.isRequired\n    })\n}\n\nexport default Post","import React, { Component } from \"react\";\nimport \"./Feed.css\";\nimport styled from 'styled-components';\nimport Post from './Components/Post';\nimport {connect} from 'react-redux';\nimport {updateFeed} from './action';\n\nconst FeedContainer = styled.div.attrs({\n    className: \"row justify-content-center\"\n})`\n\n`;\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        this.props.loadFeed();\n    }\n\n    render() {\n        const {posts} = this.props;\n        return (\n            <FeedContainer>\n                <div className=\"col-8\">\n                    {\n                        posts.map((post, index) => {\n                          return <Post key={index} item={post} /> \n                        })\n                    }\n                </div>\n            </FeedContainer>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    posts: state.feed.posts\n});\n\nconst mapActionToProps = dispatch => ({\n    loadFeed: () => dispatch(updateFeed())\n});\n\nexport default connect(mapStateToProps, mapActionToProps)(Feed);","import axios from \"axios\";\n\nexport const UPDATE_FEED = \"UPDATE_FEED\";\nexport const UPDATE_FEED_PENDING = \"UPDATE_FEED_PENDING\";\nexport const UPDATE_FEED_FULFILLED = \"UPDATE_FEED_FULFILLED\";\nexport const updateFeed = () => ({\n    type: UPDATE_FEED,\n    payload: axios.get(\n        `http://pattarasai.app2018.live:8080/appbase/newFeeds/`\n      )\n});","import React, { Component } from \"react\";\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport './AfterLogin.css';\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Input\n} from 'reactstrap';\nimport {FEED_URL, INTEREST_URL, ASK_URL, INBOX_URL, PROFILE_URL} from \"../Const/URLConstant\";\nimport {Switch, Redirect} from 'react-router-dom';\nimport PrivateRoute from '../Components/PrivateRoute';\nimport styled from 'styled-components';\nimport Feed from '../Feed/Feed';\n\nconst Container = styled.div.attrs({\n    className: \"container\"\n})`\n\n`\n\n\nclass AfterLogin extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">PetsBook</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href={FEED_URL}>Feed</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href={INTEREST_URL}>Interest</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href={ASK_URL}>Ask</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <Input placeholder=\"Search User Profile\" />    \n                            </NavItem>\n                            <NavItem>\n                                <NavLink href={INBOX_URL}>Inbox</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href={PROFILE_URL}>Profile</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n                <Container>\n                    <Switch>\n                        <PrivateRoute path={FEED_URL} component={Feed} />\n                        <Redirect exact from=\"/afterLogin\" to={FEED_URL} />\n                    </Switch>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapActionToProps = dispatch => ({\n\n});\n\nexport default withRouter(connect(mapStateToProps, mapActionToProps)(AfterLogin))","import React, { Component } from 'react';\nimport {Route, Redirect, Switch} from 'react-router-dom';\nimport {withRouter} from 'react-router';\nimport {connect} from 'react-redux';\nimport './App.css';\n\nimport Login from './Login/Login'\nimport AfterLogin from './AfterLogin/AfterLogin'\nimport PrivateRoute  from './Components/PrivateRoute';\n\nclass App extends Component {\n  render() {\n    const {isLoggedIn} = this.props;\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n          <Route path=\"/afterLogin\" component={AfterLogin} />\n          {/* <PrivateRoute path=\"/afterLogin\" isLoggedIn={isLoggedIn} component={AfterLogin} /> */}\n          <Redirect exact from=\"/\" to=\"/login\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.user.isLoggedIn\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { userConstants } from './action';\nconst initialState = {\n    isLoggedIn: false, \n    jwt: '',\n    userData: {}\n}\n\nexport default (state= initialState, action) => {\n    switch(action.type) {\n        case userConstants.LOGIN_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn : true,\n                jwt: action.jwt,\n                userData: {\n                    username: action.username\n                }\n            };\n        default:\n            return initialState;\n    }\n}","import {UPDATE_FEED_PENDING, UPDATE_FEED_FULFILLED} from './action';\n\nconst initialState = {\n    isLoading: false,\n    posts: []\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_FEED_PENDING: \n            return {\n                ...state,\n                isLoading: true\n            }\n        case UPDATE_FEED_FULFILLED:\n            return {\n                ...state,\n                posts: action.payload.data.data,\n                isLoading: false\n            }\n        \n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport login from \"./Login/redux\";\nimport user from \"./User/reducer\";\nimport feed from \"./Feed/redux\";\n\nexport default combineReducers({\n    login: login,\n    user: user,\n    feed: feed\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport promiseMiddleWare from \"redux-promise-middleware\";\nimport rootReducer from './rootReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(promiseMiddleWare()))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}